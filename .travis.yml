language: cpp
sudo: required

cache:
  ccache: true
  directories:
    - .ccache

python:
  - "3.5"

matrix:
  fast_finish: true
  include:
    - compiler: "gcc"
      os: linux
      dist: xenial
    - os: linux
      dist: bionic
    - compiler: "clang"
      os: osx
      osx_image: xcode10.1
    - compiler: "clang"
      os: osx
      osx_image: xcode11.3
    - compiler: "clang"
      os: osx
      osx_image: xcode12
      
before_install:
  - if [[ ${TRAVIS_OS_NAME} == linux ]]; then sudo apt-get install libudev-dev libusb-1.0-0; fi

#- if [[ ${TRAVIS_OS_NAME} == linux ]]; then sudo add-apt-repository --yes ppa:beineri/opt-qt551-trusty ;fi
#- if [[ ${TRAVIS_OS_NAME} == linux ]]; then sudo apt-get update -qq ;fi

  - if [[ ${TRAVIS_OS_NAME} == osx ]]; then brew update 2>&1 > /dev/null ; fi
  - if [[ ${TRAVIS_OS_NAME} == osx ]]; then brew unlink libusb ; fi
  - if [[ ${TRAVIS_OS_NAME} == osx ]]; then brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/cb21e9ac30e47e3ea161c4247a6397967f83c83f/Formula/libusb.rb --universal; fi
  #- if [[ ${TRAVIS_OS_NAME} == osx ]]; then brew unlink qt ; fi
  - if [[ ${TRAVIS_OS_NAME} == osx ]]; then brew install --force https://raw.githubusercontent.com/Homebrew/homebrew-core/8846805afc0cb8e5d114d5e222af1de3b35289df/Formula/qt.rb ; fi
  - if [[ ${TRAVIS_OS_NAME} == osx ]]; then brew link qt --force ; fi
  - if [[ ${TRAVIS_OS_NAME} == osx ]]; then export PATH=/usr/local/opt/qt/bin:$PATH ; fi

install: 
  - if [[ ${TRAVIS_OS_NAME} == linux ]]; then sudo apt-get install -y qt5-default qttools5-dev qtdeclarative5-dev libqt5svg5-dev libqt5opengl5-dev ; fi
  - if [[ ${TRAVIS_OS_NAME} == linux ]]; then QMAKE="$(command -v qmake)"; fi
#- if [[ ${TRAVIS_OS_NAME} == linux ]]; then sudo apt-get -y install qt55d qt55base qt55connectivity qt55declarative qt55graphicaleffects qt55imageformats qt55quick1 qt55quickcontrols qt55script qt55tools   ;fi


before_script:
  - git clone https://github.com/analogdevicesinc/libsmu.git
  - cd libsmu
  - mkdir build && cd build && cmake -DBUILD_PYTHON=OFF -DCMAKE_INSTALL_PREFIX=/usr/local/ ..
  - make
  - sudo make install
  - cd ../..
  - mkdir build && cd build && cmake .. && make
  - cd ..

script:
  - if [[ ${TRAVIS_OS_NAME} == osx ]]; then /usr/local/opt/qt5/bin/macdeployqt build/pixelpulse2.app -always-overwrite -verbose=2 -qmldir=qml ;fi

  - |
     if [[ ${TRAVIS_OS_NAME} == osx ]]; then
       libsmupath="$(otool -L ./build/pixelpulse2.app/Contents/MacOS/pixelpulse2 | grep libsmu | cut -d " " -f 1)"
       libsmuid="$(echo ${libsmupath} | rev | cut -d "/" -f 1 | rev)"
     fi

  - if [[ ${TRAVIS_OS_NAME} == osx ]]; then cp libsmu/build/src/${libsmuid} build/pixelpulse2.app/Contents/Frameworks/ ;fi
  - if [[ ${TRAVIS_OS_NAME} == osx ]]; then otool -L libsmu/build/src/${libsmuid} ;fi
  - if [[ ${TRAVIS_OS_NAME} == osx ]]; then sudo install_name_tool -id @executable_path/../Frameworks/${libsmuid} build/pixelpulse2.app/Contents/Frameworks/${libsmuid} ;fi
  - if [[ ${TRAVIS_OS_NAME} == osx ]]; then sudo install_name_tool -change ${libsmupath} @executable_path/../Frameworks/${libsmuid} build/pixelpulse2.app/Contents/MacOS/Pixelpulse2 ;fi

  - if [[ ${TRAVIS_OS_NAME} == osx ]]; then otool -L build/pixelpulse2.app/Contents/MacOS/Pixelpulse2 ;fi

  - if [[ ${TRAVIS_OS_NAME} == osx ]]; then /usr/local/opt/qt5/bin/macdeployqt build/pixelpulse2.app -dmg -no-plugins ;fi
  - if [[ ${TRAVIS_OS_NAME} == osx ]]; then mkdir deploy ;fi
  - if [[ ${TRAVIS_OS_NAME} == osx ]]; then cp build/pixelpulse2.dmg deploy ;fi


deploy:
  provider: s3
  access_key_id: AKIAJIUMJWTHBLSLXXPA
  secret_access_key:
    secure: OLYC1jXlh0sO+4rCJFci6AnsMCl4BQpiUCC6ndExCpRdJdHeHa7AmK7VqYEWp2esD+4oh+aq+wBKA7ZpKzWIbpDffvCFfGvph8nCnUhXpfy5bRG2nsKU4NbcwYy8vd+xzY/EY5neTqWwMbbsL7L+baqs4GGv9mHzKRhCPycOW+c=
  bucket: pixelpulse2nightly
  skip_cleanup: true
  local_dir: deploy
  acl: public_read
  on:
    condition: "${TRAVIS_OS_NAME} == osx"
    repo: analogdevicesinc/Pixelpulse2
    all_branches: true